/**
 * Autogenerated by Thrift Compiler (0.21.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.lawrence.random.randomservice;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-05-09")
public class Range
        implements org.apache.thrift.TBase<Range, Range._Fields>, java.io.Serializable, Cloneable, Comparable<Range> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "Range");

    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "start", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField END_FIELD_DESC = new org.apache.thrift.protocol.TField("end",
            org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
            new RangeStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RangeTupleSchemeFactory();

    public int start; // required
    public int end; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        START((short) 1, "start"),
        END((short) 2, "end");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // START
                    return START;
                case 2: // END
                    return END;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
          if (fields == null) {
            throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
          }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @Override
        public short getThriftFieldId() {
            return _thriftId;
        }

        @Override
        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,
                org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
        tmpMap.put(_Fields.START,
                new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.END,
                new org.apache.thrift.meta_data.FieldMetaData("end", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Range.class, metaDataMap);
    }

    public Range() {
    }

    public Range(
            int start,
            int end) {
        this();
        this.start = start;
        setStartIsSet(true);
        this.end = end;
        setEndIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Range(Range other) {
        __isset_bitfield = other.__isset_bitfield;
        this.start = other.start;
        this.end = other.end;
    }

    @Override
    public Range deepCopy() {
        return new Range(this);
    }

    @Override
    public void clear() {
        setStartIsSet(false);
        this.start = 0;
        setEndIsSet(false);
        this.end = 0;
    }

    public int getStart() {
        return this.start;
    }

    public Range setStart(int start) {
        this.start = start;
        setStartIsSet(true);
        return this;
    }

    public void unsetStart() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getEnd() {
        return this.end;
    }

    public Range setEnd(int end) {
        this.end = end;
        setEndIsSet(true);
        return this;
    }

    public void unsetEnd() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __END_ISSET_ID);
    }

    /** Returns true if field end is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __END_ISSET_ID);
    }

    public void setEndIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __END_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
        switch (field) {
            case START:
                if (value == null) {
                    unsetStart();
                } else {
                    setStart((Integer) value);
                }
                break;

            case END:
                if (value == null) {
                    unsetEnd();
                } else {
                    setEnd((Integer) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
        switch (field) {
            case START:
                return getStart();

            case END:
                return getEnd();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case START:
                return isSetStart();
            case END:
                return isSetEnd();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof Range) {
        return this.equals((Range) that);
      }
        return false;
    }

    public boolean equals(Range that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

        boolean this_present_start = true;
        boolean that_present_start = true;
        if (this_present_start || that_present_start) {
          if (!(this_present_start && that_present_start)) {
            return false;
          }
          if (this.start != that.start) {
            return false;
          }
        }

        boolean this_present_end = true;
        boolean that_present_end = true;
        if (this_present_end || that_present_end) {
          if (!(this_present_end && that_present_end)) {
            return false;
          }
          if (this.end != that.end) {
            return false;
          }
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + start;

        hashCode = hashCode * 8191 + end;

        return hashCode;
    }

    @Override
    public int compareTo(Range other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.compare(isSetStart(), other.isSetStart());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStart()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.compare(isSetEnd(), other.isSetEnd());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEnd()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end, other.end);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Range(");
        boolean first = true;

        sb.append("start:");
        sb.append(this.start);
        first = false;
      if (!first) {
        sb.append(", ");
      }
        sb.append("end:");
        sb.append(this.end);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the
          // default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class RangeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public RangeStandardScheme getScheme() {
            return new RangeStandardScheme();
        }
    }

    private static class RangeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Range> {

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot, Range struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // START
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.start = iprot.readI32();
                            struct.setStartIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // END
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.end = iprot.readI32();
                            struct.setEndIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot, Range struct)
                throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(START_FIELD_DESC);
            oprot.writeI32(struct.start);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(END_FIELD_DESC);
            oprot.writeI32(struct.end);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class RangeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        @Override
        public RangeTupleScheme getScheme() {
            return new RangeTupleScheme();
        }
    }

    private static class RangeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Range> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Range struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetStart()) {
                optionals.set(0);
            }
            if (struct.isSetEnd()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetStart()) {
                oprot.writeI32(struct.start);
            }
            if (struct.isSetEnd()) {
                oprot.writeI32(struct.end);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Range struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
            }
            if (incoming.get(1)) {
                struct.end = iprot.readI32();
                struct.setEndIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(
                proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

